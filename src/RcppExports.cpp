// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// QPADMslackcpp
Rcpp::List QPADMslackcpp(arma::vec y, arma::mat x, double tau, String penalty, double a, double lambda, double pho, int maxstep, double eps, bool intercept);
RcppExport SEXP _QPADMslack_QPADMslackcpp(SEXP ySEXP, SEXP xSEXP, SEXP tauSEXP, SEXP penaltySEXP, SEXP aSEXP, SEXP lambdaSEXP, SEXP phoSEXP, SEXP maxstepSEXP, SEXP epsSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< String >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type pho(phoSEXP);
    Rcpp::traits::input_parameter< int >::type maxstep(maxstepSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(QPADMslackcpp(y, x, tau, penalty, a, lambda, pho, maxstep, eps, intercept));
    return rcpp_result_gen;
END_RCPP
}
// paraQPADMslackcpp
Rcpp::List paraQPADMslackcpp(arma::vec y, arma::mat x, int K, double tau, String penalty, double a, double lambda, double pho, int maxstep, double eps, bool intercept);
RcppExport SEXP _QPADMslack_paraQPADMslackcpp(SEXP ySEXP, SEXP xSEXP, SEXP KSEXP, SEXP tauSEXP, SEXP penaltySEXP, SEXP aSEXP, SEXP lambdaSEXP, SEXP phoSEXP, SEXP maxstepSEXP, SEXP epsSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< String >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type pho(phoSEXP);
    Rcpp::traits::input_parameter< int >::type maxstep(maxstepSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(paraQPADMslackcpp(y, x, K, tau, penalty, a, lambda, pho, maxstep, eps, intercept));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_QPADMslack_QPADMslackcpp", (DL_FUNC) &_QPADMslack_QPADMslackcpp, 10},
    {"_QPADMslack_paraQPADMslackcpp", (DL_FUNC) &_QPADMslack_paraQPADMslackcpp, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_QPADMslack(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
